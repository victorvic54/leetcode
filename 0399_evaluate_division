class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        self.reachable_map = defaultdict(set)
        self.calculation_map = {}

        for i in range(len(equations)):
            left, right = equations[i]
            self.reachable_map[left].add(right)
            self.reachable_map[right].add(left)

            self.calculation_map[(left, right)] = values[i]
            self.calculation_map[(right, left)] = 1 / values[i]

        ans = []
        for query in queries:
            left, right = query
            if (left not in self.reachable_map) or (right not in self.reachable_map):
                ans.append(-1)
                continue
            
            if left == right:
                ans.append(1)
                continue

            ans.append(self.backtracking(left, right, set()))
        
        return ans
        
        
    def backtracking(self, curr_node, target_node, visited):
        if curr_node == target_node:
            return 1

        for next_node in self.reachable_map[curr_node]:
            if next_node not in visited:
                visited.add(next_node)
                res = self.backtracking(next_node, target_node, visited)
                if res != -1:
                    return res * self.calculation_map[curr_node, next_node]
                
                visited.remove(next_node)

        return -1

